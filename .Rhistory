#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
cliticsn <- rowDuplicator(cliticsadd)
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|\\bсi\\b|\\bшi\\b|\\bcа\\b|\\bcя\\b|\\bcа\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one clitic)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- df$Match2[[df$clitics_indexes[counter]]]
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|\\bсi\\b|\\bшi\\b|\\bcа\\b|\\bcя\\b|\\bcа\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one clitic)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- print(df$Match2[clitics_indexes]])
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|\\bсi\\b|\\bшi\\b|\\bcа\\b|\\bcя\\b|\\bcа\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one clitic)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- print(df$Match2[clitics_indexes])
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|\\bсi\\b|\\bшi\\b|\\bcа\\b|\\bcя\\b|\\bcа\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one clitic)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- c(df$Match2[clitics_indexes])
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|\\bсi\\b|\\bшi\\b|\\bcа\\b|\\bcя\\b|\\bcа\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- print(df$Match2[[clitics_indexes]])
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|\\bсi\\b|\\bшi\\b|\\bcа\\b|\\bcя\\b|\\bcа\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- c(print(df$Match2[[clitics_indexes]]))
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|\\bсi\\b|\\bшi\\b|\\bcа\\b|\\bcя\\b|\\bcа\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- c(print(df$Match2[[,clitics_indexes]]))
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|\\bсi\\b|\\bшi\\b|\\bcа\\b|\\bcя\\b|\\bcа\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- c(print(df$Match2[,clitics_indexes]))
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
clitics$Match2[2]
clitics$Match2[[2]]
clitics$Match2[counter[2]]
clitics$Match2[1[2]]
clitics$Match2[3[2]]
clitics$Match2[,[2]]
clitics$Match2[2][3]
clitics$Match2[2][[3]]
clitics$`Match2`[[3]]
clitics$`Match2`[[3]][2]
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- clitics$`Match2`[[counter]][clitics_indexes]
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- clitics$`Match2`[[counter]][clitics_indexes]
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- clitics$`Match2`[[counter]][df$clitics_indexes[counter]]
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
View(clitics2)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- c(clitics$`Match2`[[counter]][clitics_indexes])
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
df$clit <- c(clitics$`Match2`[[counter]][clitics_indexes])
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
df$clit <- c(clitics$`Match2`[[counter]][[clitics_indexes]])
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
rowDuplicator <- function(df){
clitics2 <- 0
counter<-1
while(counter < length(df)){ # makes sure that the newly appended rows will not be taken into account. Should be equal to nrow(df)
for(row in df){
clitics_indexes <- as.numeric(grep("\\bся\\b|\\bса\\b|\\bша\\b|\\bшя\\b|\\bсі\\b|\\bси\\b|\\bші\\b|\\bши\\b|\\bше\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ся\\b|са\\b|ша\\b|шя\\b|сі\\b|си\\b|ші\\b|ши\\b|ше\\b|сi\\b|шi\\b|cа\\b|cя\\b|cа\\b", df$Match2[[counter]])) # Detects the index of clitics
df$clitics_indexes[counter] <- print(as.numeric(length(clitics_indexes))) # Counts the amount of detected indexes and saves them into new column
if(df$clitics_indexes[counter] > 1){ # Duplicates the row n times if n > 1 (more than one cliticon)
rows <- df %>%
slice(rep(as.numeric(rownames(df[counter,])),df$clitics_indexes[counter]-1))
rows_df <- data.frame(rows)
df <- rbind(df,rows_df)
counter <- counter + 1
}
else{ # Raises the count if n = 1
counter <- counter + 1
}
}
}
#df$clitics_indexes = NULL # Deletes the index count row, as it's not needed anymore
clitics2 <- return(df) # Saves data into new DF
}
# Apply function and save new .xlsx file
clitics2 <- rowDuplicator(clitics)
clitics3 <- clitics2[order(clitics2$From),]
openxlsx::write.xlsx(clitics3, file = "clitics_updated_add.xlsx", sheetName="Sheet1", col.names=TRUE, row.names=FALSE, append=TRUE)
print(1:40)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/Admin/Documents/Documents/Lahjouji/Russinisch_Studien/klitika")
# Set language
Sys.setlocale(locale ="ukrainian")
if (!require("tidyverse","tm", "data.table", "xlsx")) install.packages('tidyverse', "tm", "data.table", "xlsx")
if (!require("tidyverse","tm", "data.table", "xlsx"))
if (!require("tidyverse","tm", "data.table", "xlsx"))
install.packages('tidyverse', "tm", "data.table", "xlsx")
library(tidyverse)
library(tidyverse)
library(tm)
library(data.table)
library(xlsx)
# Set working directory
setwd("C:/Users/Admin/Documents/Documents/Lahjouji/Russinisch_Studien/klitika")
knitr::opts_knit$set(root.dir = "C:/Users/Admin/Documents/Documents/Lahjouji/Russinisch_Studien/klitika")
library(XML)
library(methods)
freqs<- read.table("C:/Users/Admin/Documents/Documents/Lahjouji/Russinisch_Studien/stylo/Rusyn_Speakers_txt/table_with_frequencies.txt",encoding = "UTF-8")
set_freqs <- freqs  %>% t() %>% as.data.frame() # transform DF
set_freqs   <- tibble::rownames_to_column(set_freqs  , "Speaker") # rename column with texts
## Packages ----
library(stylo)
library(pamr)
library(reshape2)
library(tidyverse)
library(ggsignif)
library(ggpubr)
library(xlsx)
library(stringr)
library(scales)
dataset_freqs = as.matrix(freqs)
dataset_freqs <- t(dataset_freqs)
freqs<- read.table("C:/Users/Admin/Documents/Documents/Lahjouji/Russinisch_Studien/stylo/Rusyn_Speakers_txt/table_with_frequencies.txt",encoding = "UTF-8")
set_freqs <- freqs  %>% t() %>% as.data.frame() # transform DF
set_freqs   <- tibble::rownames_to_column(set_freqs  , "Speaker") # rename column with texts
dataset_freqs = as.matrix(freqs)
dataset_freqs <- t(dataset_freqs)
dataset_freqs <- freqs %>% t() %>% as.data.frame() # transform DF
dataset_freqs  <- tibble::rownames_to_column(dataset_freqs , "Speaker") # rename column with texts
shto_subset <- subset(set_freqs, што > 0)
shto_df <- data.frame(shto_subset$Speaker, shto_subset$што)
shto_df <-shto_df[order(shto_df$shto_subset.што, decreasing = T),]
## language ----
Sys.setlocale(locale = "UTF-8")
## language ----
Sys.setlocale(locale = "unicode")
R.version()
R.Version()
install.packages("updater")
library(updater)
## language ----
Sys.setlocale(locale = "UTF-8")
freqs<- read.table("C:/Users/Admin/Documents/Documents/Lahjouji/Russinisch_Studien/stylo/Rusyn_Speakers_txt/table_with_frequencies.txt",encoding = "UTF-8")
set_freqs <- freqs  %>% t() %>% as.data.frame() # transform DF
set_freqs   <- tibble::rownames_to_column(set_freqs  , "Speaker") # rename column with texts
## Packages ----
library(stylo)
library(pamr)
library(reshape2)
library(tidyverse)
library(ggsignif)
library(ggpubr)
library(xlsx)
library(stringr)
library(scales)
## Packages ----
library(stylo)
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
getwd(9)
getwd()
library(devtools)
devtools::install_github("mctwiszt/rgeofreqs")
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
devtools::install_github("mctwiszt/rgeofreqs")
library(devtools)
devtools::install_github("mctwiszt/rgeofreqs")
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rtools", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
library(devtools)
library(Rcpp)
devtools::install_github("mctwiszt/rgeofreqs")
library(devtools)
library(Rcpp)
devtools::install_github("mctwiszt/rgeofreqs")
install.packages("usethis")
devtools::install_github("mctwiszt/rgeofreqs")
devtools::install_github("mctwiszt/rgeofreqs")
library(rgeofreqs)
library(rGeoFreqs)
?getStyloFreqList
styloFreqList_w_1 <- getStyloFreqList(type = "w", size = 1, path, corpusfoldername = "corpus",  mfw.min = 100, mfw.max = 500, mfw.incr = 100, culling.min = 20, culling.max = 70, culling.incr = 20, distance.measure = "eder",  output = freq_list)
## 2. Get clustering and freq-lists with stylo ----
path <- "C:/Users/Admin/Documents/Documents/Lahjouji/Russinisch_Studien/stylo/Rusyn_Speakers_txt"
styloFreqList_w_1 <- getStyloFreqList(type = "w", size = 1, path, corpusfoldername = "corpus",  mfw.min = 100, mfw.max = 500, mfw.incr = 100, culling.min = 20, culling.max = 70, culling.incr = 20, distance.measure = "eder",  output = freq_list)
devtools::install_github("mctwiszt/rgeofreqs")
detatch(rGeoFreqs)
detach(rGeoFreqs)
detach("rGeoFreqs")
detach("package:rGeoFreqs", unload = TRUE)
devtools::install_github("mctwiszt/rgeofreqs")
library(rGeoFreqs)
styloFreqList_w_1 <- getStyloFreqList(type = "w", size = 1, path, corpusfoldername = "corpus",  mfw.min = 100, mfw.max = 500, mfw.incr = 100, culling.min = 20, culling.max = 70, culling.incr = 20, distance.measure = "eder",  output = freq_list)
use_pipe(export = TRUE)
library(devtools)
library(roxygen2)
use_pipe(export = TRUE)
setwd("C:/Users/Admin/Documents/rGeoFreqs/github/rGeoFreqs")
use_pipe(export = TRUE)
devtools::document()
devtools::install_github("mctwiszt/rgeofreqs")
library(rGeoFreqs)
detach("package:rGeoFreqs", unload = TRUE)
devtools::install_github("mctwiszt/rgeofreqs")
library(rGeoFreqs)
styloFreqList_w_1 <- getStyloFreqList(type = "w", size = 1, path, corpusfoldername = "corpus",  mfw.min = 100, mfw.max = 500, mfw.incr = 100, culling.min = 20, culling.max = 70, culling.incr = 20, distance.measure = "eder",  output = freq_list)
library(rGeoFreqs)
library(rGeoFreqs)
styloFreqList_w_1 <- getStyloFreqList(type = "w", size = 1, path, corpusfoldername = "corpus",  mfw.min = 100, mfw.max = 500, mfw.incr = 100, culling.min = 20, culling.max = 70, culling.incr = 20, distance.measure = "eder",  output = freq_list)
remove.packages("rGeoFreqs")
