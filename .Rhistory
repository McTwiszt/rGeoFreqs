wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
debug(signifTests)
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- cat(depvar, "tests.txt", sep = "_")
file <- as.character(file)
cat("Tests Output for feature: ", depvar,  "\n", file = file)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- cat(depvar, "tests.txt", sep = "_")
file <- as.character(file)
cat("Tests Output for feature: ", depvar,  "\n", file = file)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- toString(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n", file = file)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- toString(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n", file = file)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
debug(signifTests)
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
name <- cat(depvar, "tests.txt", sep = "_")
file <- toString(name)
cat("Tests Output for feature: ", depvar,  "\n", file = file)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- capture.output(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n", file = file)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- capture.output(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n\n", file = file)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- capture.output(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n\n", file = file)
cat("----------------------------------------------------",file = file, append = TRUE)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- capture.output(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n", file = file)
cat("----------------------------------------------------","\n\n",file = file, append = TRUE)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- capture.output(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n", file = file)
cat("----------------------------------------------------","\n\n",file = file, append = TRUE)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export anova test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export t-test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- capture.output(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n", file = file)
cat("----------------------------------------------------","\n\n",file = file, append = TRUE)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export Levene test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export Wilcoxon test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n", file = file, append = TRUE)
# add line
cat("--------------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- capture.output(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n", file = file)
cat("----------------------------------------------------","\n\n",file = file, append = TRUE)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export Levene test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
cat("------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export Wilcoxon test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n", file = file, append = TRUE)
# add line
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- capture.output(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n", file = file)
cat("----------------------------------------------------","\n\n",file = file, append = TRUE)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export Levene test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
cat("\n", file = file, append = TRUE)
cat("------------------", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export Wilcoxon test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
signifTests <- function(df, var = "var", depvar = "depvar") {
var_list <- unique(df[[var]])
result_list <- list()
file <- capture.output(cat(depvar, "tests.txt", sep = "_"))
cat("Tests Output for feature: ", depvar,  "\n", file = file)
cat("----------------------------------------------------","\n\n",file = file, append = TRUE)
for (i in var_list) {
df_sub <- subset(df, var != i)
col_name <- rlang::enquo(depvar)
levene_test <- suppressWarnings(leveneTest(df_sub[[depvar]], df_sub[[var]]))
wilcox_test <- suppressWarnings(wilcox.test(value ~ var, reshape2::melt(df_sub), exact = FALSE, alternative = "two.sided"))
# export Levene test output
cat("Levene Test for:\n", file = file, append = TRUE)
cat(unique(df_sub$var), file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
capture.output(levene_test, file = file, append = TRUE)
cat("\n", file = file, append = TRUE)
cat(">", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# export Wilcoxon test output
cat("Wilcoxon-Test for:\n", file = file, append = TRUE)
# add 2 newlines
cat(unique(df_sub$var), file = file, append = TRUE)
capture.output(wilcox_test, file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
# add line
cat("~~~~~~~~~~~~~~~~~~~~~~~~~~~", file = file, append = TRUE)
# add 2 newlines
cat("\n\n", file = file, append = TRUE)
}
}
u_tests <- signifTests(u_df, var = "var", depvar = "у_scaled")
devtools::document()
setwd("C:/Users/Admin/Documents/rGeoFreqs")
devtools::document()
setwd("C:/Users/Admin/Documents/rGeoFreqs/github/rGeoFreqs/")
devtools::document()
devtools::document()
getwd
gedwd()
getwd()+
getwd()
devtools::document()
